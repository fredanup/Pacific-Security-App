// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id      String  @id @default(cuid())
  name    String
  address String?
  users   User[]
}

model Document {
  id        String   @id @default(cuid())
  document  String   @unique
  key       String?
  createdAt DateTime @default(now())
}

model Calling {
  id           String   @id @default(cuid())
  requirement  String
  min_exp_work Int
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime @default(now())
  resultAt     DateTime @default(now())
  expiresAt    DateTime @default(now())
}

model JobApplication {
  id            String   @id @default(cuid())
  status        String?
  resumeKey     String?
  createdAt     DateTime @default(now())
  review        Boolean //Fue revisada la postulaci√≥n?
  interviewAt   DateTime
  interviewLink String?
  Postulant     User?    @relation(fields: [postulantId], references: [id])
  postulantId   String?
}

model User {
  id            String          @id @default(cuid())
  name          String?
  lastName      String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  //Role de usuario: Supervisor, administrador, vendedor
  role          String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Branch          Branch?          @relation(fields: [branchId], references: [id])
  branchId        String?
  callings        Calling[]
  jobApplications JobApplication[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
